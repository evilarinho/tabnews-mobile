// Mocks generated by Mockito 5.1.0 from annotations
// in tab_news/test/ui/pages/content_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tab_news/ui/pages/content/content_presenter.dart' as _i2;
import 'package:tab_news/ui/pages/content/content_viewmodel.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ContentPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentPresenter extends _i1.Mock implements _i2.ContentPresenter {
  MockContentPresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<bool> get isLoadingContentStream =>
      (super.noSuchMethod(Invocation.getter(#isLoadingContentStream),
          returnValue: Stream<bool>.empty()) as _i3.Stream<bool>);
  @override
  _i3.Stream<bool> get isLoadingChildrenStream =>
      (super.noSuchMethod(Invocation.getter(#isLoadingChildrenStream),
          returnValue: Stream<bool>.empty()) as _i3.Stream<bool>);
  @override
  _i3.Stream<_i4.ContentViewModel?> get contentStream =>
      (super.noSuchMethod(Invocation.getter(#contentStream),
              returnValue: Stream<_i4.ContentViewModel?>.empty())
          as _i3.Stream<_i4.ContentViewModel?>);
  @override
  _i3.Stream<List<_i4.ContentViewModel>> get childrenStream =>
      (super.noSuchMethod(Invocation.getter(#childrenStream),
              returnValue: Stream<List<_i4.ContentViewModel>>.empty())
          as _i3.Stream<List<_i4.ContentViewModel>>);
  @override
  _i3.Future<void> loadData(String? username, String? slugId) =>
      (super.noSuchMethod(Invocation.method(#loadData, [username, slugId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void goToContent(String? username, String? slug) =>
      super.noSuchMethod(Invocation.method(#goToContent, [username, slug]),
          returnValueForMissingStub: null);
}
